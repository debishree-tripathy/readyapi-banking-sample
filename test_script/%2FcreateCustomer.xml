<?xml version="1.0" encoding="UTF-8"?>
<con:restMockAction xmlns:con="http://eviware.com/soapui/config" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="f7de604a-fd5e-4f0f-b311-a4bbc873724c" method="POST" name="/createCustomer" resourcePath="/createCustomer">
  <con:settings id="b8ff8210-8848-4a9e-b51d-bd4243f68078">
    <con:setting id="f7de604a-fd5e-4f0f-b311-a4bbc873724cfileName">%2FcreateCustomer</con:setting>
  </con:settings>
  <con:defaultResponse>error</con:defaultResponse>
  <con:dispatchStyle>SCRIPT</con:dispatchStyle>
  <con:dispatchConfig/>
  <con:dispatchPath><![CDATA[import groovy.json.JsonSlurper
import groovy.sql.Sql
import groovy.json.JsonBuilder

// Step 1: Read request body
def requestBody = mockRequest.getRequestContent()
log.info("Request Body: " + requestBody)

if (!requestBody?.trim()) {
    context.validationErrors = new JsonBuilder(["Empty request body"]).toString()
    return "validationfailed"
}

// Step 2: Parse JSON
def json
try {
    json = new JsonSlurper().parseText(requestBody)
} catch (Exception e) {
    context.validationErrors = new JsonBuilder(["Invalid JSON format"]).toString()
    return "validationfailed"
}

// Step 3: Extract & validate fields
def name = json.name?.trim()
def email = json.email?.trim()
def dob = json.dob?.trim()
def pan = json.panNumber?.trim()

def errors = []

// âœ… Correct regex (no double backslashes)
if (!name || !(name ==~ /^[A-Za-z ]{2,}$/)) {
    errors << "Invalid or missing name"
}

if (!email || !(email ==~ /^[\w.-]+@[\w.-]+\.[A-Za-z]{2,}$/)) {
    errors << "Invalid or missing email"
}

if (!dob || !(dob ==~ /^\d{4}-\d{2}-\d{2}$/)) {
    errors << "Invalid or missing date of birth"
}

if (!pan || !(pan ==~ /^[A-Z]{5}[0-9]{4}[A-Z]$/)) {
    errors << "Invalid or missing PAN number"
}


if (!errors.isEmpty()) {
    context.validationErrors = new JsonBuilder(errors).toString()
    return "validationfailed"
}

// Step 4: Generate customer number
def project = mockOperation.mockService.project
def lastNumberProp = "lastCustomerNumber"
def lastNumber = project.hasProperty(lastNumberProp) ? project.getPropertyValue(lastNumberProp)?.toInteger() : 100000
def nextNumber = lastNumber + 1
def customerNumber = "CUST${nextNumber}".toString()

context.customerNumber = customerNumber
project.setPropertyValue(lastNumberProp, nextNumber.toString())

// Step 5: Insert into DB
def dbUrl = "jdbc:mysql://127.0.0.1:3306/banking?useSSL=false"
def user = "root"
def pass = "root"
def driver = "com.mysql.cj.jdbc.Driver"

try {
    def sql = Sql.newInstance(dbUrl, user, pass, driver)

    // Check if record exists
    def existing = sql.firstRow("SELECT 1 FROM customerdata WHERE email = ? OR panNumber = ?", [email, pan])
    if (existing) {
        context.validationErrors = new JsonBuilder(["Customer with same email or PAN already exists"]).toString()
        return "validationfailed"
    }

    // Insert
    sql.executeInsert(
        "INSERT INTO customerdata (customerNumber, name, email, dob, panNumber) VALUES (?, ?, ?, ?, ?)",
        [customerNumber, name, email, dob, pan]
    )

} catch (Exception e) {
    log.error("DB Error: " + e.message)
    context.validationErrors = new JsonBuilder(["Database error: ${e.message}"]).toString()
    return "validationfailed"
}

return "success"]]></con:dispatchPath>
  <con:dispatchXPath/>
  <con:parameterDispatcherRuleContainer/>
  <con:routeScript/>
  <con:response compressedBodyContent="aced00057372002f636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c7565000b8b02c748eeab0200035a000a636f6d707265737365644c000b636f6d7072657373696f6e74003d4c636f6d2f657669776172652f736f617075692f696d706c2f737570706f72742f436f6d7072657373656456616c756524436f6d7072657373696f6e3b5b0004646174617400025b427870007e72003b636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c756524436f6d7072657373696f6e00000000000000001200007872000e6a6176612e6c616e672e456e756d000000000000000012000078707400044e4f4e4570" dataSource="" httpResponseStatus="500" id="80f71dbb-0183-4467-b5b5-6115fe64969e" mediaType="application/json" name="error">
    <con:settings/>
    <con:responseContent>{
"status": "failed"
"message": "server side error"
	}</con:responseContent>
  </con:response>
  <con:response compressedBodyContent="aced00057372002f636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c7565000b8b02c748eeab0200035a000a636f6d707265737365644c000b636f6d7072657373696f6e74003d4c636f6d2f657669776172652f736f617075692f696d706c2f737570706f72742f436f6d7072657373656456616c756524436f6d7072657373696f6e3b5b0004646174617400025b427870007e72003b636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c756524436f6d7072657373696f6e00000000000000001200007872000e6a6176612e6c616e672e456e756d000000000000000012000078707400044e4f4e4570" dataSource="" httpResponseStatus="400" id="24445b09-2b9a-49c4-b657-b2be8738d195" mediaType="application/json" name="validationfailed">
    <con:settings/>
    <con:script/>
    <con:responseContent>{
  "status": "validationfailed",
  "errors": ${=context.validationErrors}
}</con:responseContent>
  </con:response>
  <con:response compressedBodyContent="aced00057372002f636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c7565000b8b02c748eeab0200035a000a636f6d707265737365644c000b636f6d7072657373696f6e74003d4c636f6d2f657669776172652f736f617075692f696d706c2f737570706f72742f436f6d7072657373656456616c756524436f6d7072657373696f6e3b5b0004646174617400025b427870007e72003b636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c756524436f6d7072657373696f6e00000000000000001200007872000e6a6176612e6c616e672e456e756d000000000000000012000078707400044e4f4e4570" dataSource="" httpResponseStatus="200" id="ea4bbc99-f6a3-46ef-88d4-6d92c6fd255f" name="success">
    <con:settings/>
    <con:script/>
    <con:responseContent>{
  "status": "success",
  "customerNumber": "${=context.customerNumber}"
}</con:responseContent>
  </con:response>
</con:restMockAction>